<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.PostRepository">

    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.Post"
            useGeneratedKeys="true" keyColumn="id" keyProperty="post_id">
        INSERT INTO s1_post
        (user_id, category_id, subject, contents, price, regDate)
        VALUES
        (#{user.id}, #{category_id}, #{subject}, #{contents}, #{price}, NOW())
    </insert>

    <update id="chPostStatus" flushCache="true">
        UPDATE s1_post
        SET status = 1
        WHERE post_id = #{post_id}
    </update>

    <update id="delStatus" flushCache="true">
        UPDATE s1_post
        SET status = 2
        WHERE post_id = #{post_id}
    </update>

    <update id="incViewCnt" flushCache="true">
        UPDATE s1_post
        SET viewCnt = viewCnt + 1
        WHERE post_id = #{post_id}
    </update>

    <sql id="SELECT_BASE">
        SELECT
        p.post_id AS p_post_id,
        ANY_VALUE(p.user_id) AS p_user_id,
        ANY_VALUE(p.subject) AS p_subject,
        ANY_VALUE(p.contents) AS p_contents,
        ANY_VALUE(p.price) AS p_price,
        ANY_VALUE(p.viewCnt) AS p_viewCnt,
        ANY_VALUE(p.regDate) AS p_regDate,
        ANY_VALUE(p.status) AS p_status,
        ANY_VALUE(p.category_id) AS p_category_id,
        ANY_VALUE(u.id) AS u_id,
        ANY_VALUE(u.username) AS u_username,
        ANY_VALUE(u.name) AS u_name,
        ANY_VALUE(u.email) AS u_email,
        COALESCE(ANY_VALUE(a.sourcename), '이미지없음') AS a_sourcename,
        ANY_VALUE(a.isImage) AS a_isImage,
        ANY_VALUE(c.id) AS c_id,
        ANY_VALUE(c.name) AS c_name
        FROM s1_post p
        LEFT JOIN s1_user u ON p.user_id = u.id
        LEFT JOIN s1_category c ON p.category_id = c.id
        LEFT JOIN s1_attachment a ON a.post_id = p.post_id
    </sql>

    <resultMap id="mapUser" type="com.lec.spring.domain.User">
        <result column="u_id" property="id"/>
        <result column="u_username" property="username"/>
        <result column="u_name" property="name"/>
        <result column="u_email" property="email"/>
        <result column="u_registDate" property="regDate"/>
    </resultMap>


    <resultMap id="mapCategory" type="com.lec.spring.domain.Category">
        <result column="c_id" property="id"/>
        <result column="c_name" property="name"/>
    </resultMap>

    <resultMap id="mapAttachment" type="com.lec.spring.domain.Attachment">
        <result column="a_id" property="id"/>
        <result column="a_sourcename" property="sourcename"/>
        <result column="a_filename" property="filename"/>
        <result column="a_isImage" property="isImage"/>
    </resultMap>


    <resultMap id="mapPost" type="com.lec.spring.domain.Post">
        <result column="p_post_id" property="post_id"/>
        <result column="p_user_id" property="user_id"/>
        <result column="p_category_id" property="category_id"/>
        <result column="p_subject" property="subject"/>
        <result column="p_contents" property="contents"/>
        <result column="p_price" property="price"/>
        <result column="p_viewCnt" property="viewCnt"/>
        <result column="p_regDate" property="regDate"/>
        <result column="p_status" property="status"/>
        <result column="p_category_id" property="category_id"/>
        <collection property="user" resultMap="mapUser"/>
        <collection property="category" resultMap="mapCategory"/>
        <collection property="attachment" resultMap="mapAttachment"/>
    </resultMap>

    <select id="findByPostId" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        WHERE p.post_id = #{post_id}
        GROUP BY p.post_id
    </select>

    <select id="findAll" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        GROUP BY p.post_id
        ORDER BY p.post_id DESC
    </select>

    <update id="modify" flushCache="true"
            parameterType="com.lec.spring.domain.Post">
        UPDATE s1_post
        SET subject = #{subject}, contents = #{contents}, price = #{price}, category_id = #{category_id}, status = #{status}
        WHERE post_id = #{post_id}
    </update>

    <select id="countSearchResults" resultType="int">
        SELECT COUNT(*) FROM s1_post p ,s1_category c, s1_user u
        WHERE p.category_id = c.id
        AND p.status != 2
        AND u.id = p.user_id
        <if test ="type == '제목'">
            AND  LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="type == '생활용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 1, '%'))
        </if>
        <if test="type == '패션의류'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 2, '%'))
        </if>
        <if test="type == '가전제품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 3, '%'))
        </if>
        <if test="type == '스포츠용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 4, '%'))
        </if>
        <if test="type == '도서/음반/DVD'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 5, '%'))
        </if>
        <if test="type == '문구/오피스'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 6, '%'))
        </if>
    </select>

    <select id="searchWithPagination" resultMap="mapPost" parameterType="map">
        <include refid="SELECT_BASE"/>
        WHERE p.status != 2
        <if test ="type == '제목'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="type == '생활용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 1, '%'))
        </if>
        <if test="type == '패션의류'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 2, '%'))
        </if>
        <if test="type == '가전제품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 3, '%'))
        </if>
        <if test="type == '스포츠용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 4, '%'))
        </if>
        <if test="type == '도서/음반/DVD'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 5, '%'))
        </if>
        <if test="type == '문구/오피스'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 6, '%'))
        </if>
        GROUP BY p.post_id
        ORDER BY p.post_id DESC
        LIMIT #{from}, #{rows}
    </select>


    <!-- 메인페이지 - 최신 판매글 -->
    <select id="findLatestPostsWithUsernameAndSampleImg" resultType="java.util.Map">
        SELECT
            p.post_id,
            p.user_id,
            p.category_id,
            p.subject,
            p.contents,
            p.price,
            p.viewCnt,
            p.status,
            p.regDate,
            p.sampleImg,
            u.username,
            MAX(a.filename) AS attachment_filename
        FROM s1_post p
            JOIN s1_user u ON p.user_id = u.id
            LEFT JOIN s1_attachment a ON p.post_id = a.post_id
        GROUP BY p.post_id
        ORDER BY p.regDate DESC LIMIT 5;
    </select>

    <select id="getImagePathsByPostId" resultType="java.lang.String">
        SELECT a.filename
        FROM s1_attachment a
        JOIN s1_post p ON a.post_id = p.post_id
        WHERE p.post_id = #{postId}
    </select>

    <!-- 메인페이지 - 관심 판매글 (사용자 아이디로 가져오기) -->
    <select id="findLikedPostsByUserId" parameterType="java.lang.Long" resultType="java.util.Map">
            SELECT
                p.*,
                u.username as username,
                MAX(a.filename) as attachment_filename
            FROM s1_post p
                JOIN s1_heart h ON p.post_id = h.post_id
                JOIN s1_user u ON p.user_id = u.id
                LEFT JOIN s1_attachment a ON p.post_id = a.post_id
            WHERE
                h.user_id = #{userId}
                AND h.is_active = TRUE
            GROUP BY p.post_id
            ORDER BY MAX(h.created_at) DESC
            LIMIT 5
    </select>

    <!-- 사용자 ID 가져오기 -->
    <select id="findUserIdByUsername" resultType="java.lang.Long">
        SELECT id FROM s1_user WHERE username = #{username}
    </select>

    <!-- 마이페이지 - 내 판매글 삭제하기 -->
    <update id="updatePostStatus" parameterType="java.util.Map">
        UPDATE s1_post
        SET status = 2
        WHERE post_id IN
        <foreach collection="postIds" item="postId" open="(" separator="," close=")">
            #{postId}
        </foreach>
    </update>

    <delete id="delete" flushCache="true"
            parameterType="com.lec.spring.domain.Post">
        DELETE FROM s1_post FROM post_id = #{post_id}
    </delete>

    <!--관리자 게시글수 -->
    <select id="admincountSearchResults" resultType="int">
        SELECT COUNT(*) FROM s1_post p ,s1_user u
        Where  u.id = p.user_id
        <if test ="type == '제목'">
            AND  LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="type == '작성자'">
            AND LOWER(u.username) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
    </select>

    <!--관리자 게시글검색 -->
    <select id="adminsearchWithPagination" resultMap="mapPost" parameterType="map">
        SELECT
        p.post_id "p_post_id"
        , p.user_id "p_user_id"
        , p.subject "p_subject"
        , p.regDate "p_regDate"
        , p.status "p_status"
        , u.id "u_id"
        , u.username "u_username"
        , u.name "u_name"
        FROM s1_post p
        LEFT JOIN  s1_user u
        ON p.user_id = u.id
        <if test ="type == '제목'">
            WHERE
            LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="type == '작성자'">
            WHERE
            LOWER(u.username) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
        ORDER BY p.post_id DESC
        LIMIT #{from}, #{rows}
    </select>


    <!-- 관리자페이지 - 판매 게시글 삭제하기 -->
    <update id="adminupdatePostStatus" parameterType="java.util.Map">
        UPDATE s1_post
        SET status = 2
        WHERE post_id IN
        <foreach collection="postIds" item="postId" open="(" separator="," close=")">
            #{postId}
        </foreach>
    </update>


</mapper>