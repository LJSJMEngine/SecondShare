<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.PostRepository">

    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.Post"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO s1_post
        (user_id, subject, content, price, category_id)
        VALUES
        ( #{user.id}, #{subject}, #{content}, #{price}, #{category_id})
    </insert>

    <update id="incViewCnt" flushCache="true">
        UPDATE s1_post
        SET viewCnt = viewCnt + 1
        WHERE post_id = #{post_id}
    </update>

    <sql id="SELECT_BASE">
        SELECT
        p.post_id "p_post_id"
        , p.user_id "p_user_id"
        , p.subject "p_subject"
        , p.contents "p_contents"
        , p.price "p_price"
        , p.viewCnt "p_viewCnt"
        , p.regDate "p_regDate"
        , p.status "p_status"
        , p.category_id "p_category_id"
        , u.id "u_id"
        , u.username "u_username"
        , a.sourcename "a_sourcename"
        , a.filename "a_filename"
        , a.id "a_id"
        , c.id "c_id"
        , c.name "c_name"
        FROM s1_post p, s1_user u  ,s1_attachment a, s1_category c
        WHERE p.user_id = u.id
        AND p.category_id = c.id
    </sql>
    <resultMap id="mapUser" type="com.lec.spring.domain.User">
        <result column="u_id" property="id"/>
        <result column="u_username" property="username"/>
        <result column="u_regdate" property="regDate"/>
    </resultMap>


    <resultMap id="mapCategory" type="com.lec.spring.domain.Category">
        <result column="c_id" property="id"/>
        <result column="c_name" property="name"/>
    </resultMap>

    <resultMap id="mapAttachment" type="com.lec.spring.domain.Attachment">
        <result column="a_id" property="id"/>
        <result column="a_sourcename" property="sourcename"/>
        <result column="a_filecename" property="filecename"/>
    </resultMap>


    <resultMap id="mapPost" type="com.lec.spring.domain.Post">
        <result column="p_post_id" property="post_id"/>
        <result column="p_user_id" property="user_id"/>
        <result column="p_subject" property="subject"/>
        <result column="p_contents" property="contents"/>
        <result column="p_price" property="price"/>
        <result column="p_viewCnt" property="viewCnt"/>
        <result column="p_regDate" property="regDate"/>
        <result column="p_status" property="status"/>
        <result column="p_category_id" property="category_id"/>
        <collection property="user" resultMap="mapUser"/>
        <collection property="category" resultMap="mapCategory"/>
        <collection property="attachment" resultMap="mapAttachment"/>
    </resultMap>

    <select id="findByPostId" resultType="com.lec.spring.domain.Post">
        <include refid="SELECT_BASE"/>
            AND p.post_id = #{p.post_id}
    </select>


    <!--  delStatus 글을 삭제했을경우 완전히 삭제되면 안되니
    회원탈퇴의 경우와 같이 비활성화 column boolean임  -->
    <update id="modify" flushCache="true"
            parameterType="com.lec.spring.domain.Post">
        UPDATE s1_post
        SET subject = #{subject}, content = #{content}, price = #{price}, delStatus = #{delStatus}
        WHERE post_id = #{post_id}
    </update>




    <!-- 페이징 용 쿼리 -->
    <select id="selectFromRow" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.post_id DESC
        LIMIT #{param1}, #{param2}
    </select>

    <select id="countAll" resultType="int">
        SELECT count(*) FROM s1_post
    </select>


    <select id="countSearchResults" resultType="int">
        SELECT COUNT(*) FROM s1_post p ,s1_category c
        WHERE
        p.category_id = c.id
        <if test ="type == '제목'">
          AND  LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="type == '생활용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 1, '%'))
        </if>
        <if test="type == '패션의류'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 2, '%'))
        </if>
        <if test="type == '가전제품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 3, '%'))
        </if>
        <if test="type == '스포츠용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 4, '%'))
        </if>
        <if test="type == '도서/음반/DVD'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 5, '%'))
        </if>
        <if test="type == '문구/오피스'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 6, '%'))
        </if>


    </select>

    <select id="searchWithPagination" resultMap="mapPost" parameterType="map">
        <include refid="SELECT_BASE"/>
        <if test ="type == '제목'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="type == '생활용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 1, '%'))
        </if>
        <if test="type == '패션의류'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 2, '%'))
        </if>
        <if test="type == '가전제품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 3, '%'))
        </if>
        <if test="type == '스포츠용품'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 4, '%'))
        </if>
        <if test="type == '도서/음반/DVD'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 5, '%'))
        </if>
        <if test="type == '문구/오피스'">
            AND LOWER(p.subject) LIKE LOWER(CONCAT('%', #{keyword}, '%'))
            AND LOWER(c.id) LIKE LOWER(CONCAT('%', 6, '%'))
        </if>


        ORDER BY p.post_id DESC
        LIMIT #{from}, #{rows}
    </select>

</mapper>